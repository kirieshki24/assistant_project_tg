from services.firestore import (
    save_standup, 
    update_context, 
    save_issue, 
    update_issue_status
)
from services.ai import generate_ai_response
import datetime
import pytz
from config import END_NOTIFICATIONS_TIME

def start_stand_up(data: dict) -> str:
    """Начинает процесс ежедневного стендапа."""
    user_id = data['user_id']
    chat_id = data['chat_id']

    save_standup(user_id)
    update_context(chat_id=chat_id, message_type="daily_standup_completed_check", user_id=user_id)

    return "Hello! Let's start your daily stand-up. Please tell me what you have completed since the last stand-up."

def daily_standup_completed_check(data: dict) -> str:
    """Обрабатывает ответ о выполненных задачах."""
    message_text = data['message_text']
    user_id = data['user_id']
    chat_id = data['chat_id']

    save_standup(user_id, completed=message_text)
    update_context(chat_id=chat_id, message_type="daily_standup_plans_check", user_id=user_id)

    return "Completed tasks information saved successfully.\nNow tell me please about your plans for today."

def daily_standup_plans_check(data: dict) -> str:
    """Обрабатывает ответ о планах на день."""
    message_text = data['message_text']
    user_id = data['user_id']
    chat_id = data['chat_id']

    save_standup(user_id, plans=message_text)
    update_context(chat_id=chat_id, message_type="daily_standup_issues_check", user_id=user_id)

    return "Plans information saved successfully.\nNow, please tell me, do you have any issues or blockers?"

def handle_issue_no(data: dict) -> str:
    """Обрабатывает отсутствие проблем у пользователя."""
    user_id = data['user_id']
    chat_id = data['chat_id']

    save_standup(user_id, issues="No issues")
    update_context(chat_id=chat_id, message_type=None, user_id=user_id)

    return "Issues information saved successfully.\nThank you for your stand-up report. If you have any questions, write here."

def handle_issue_yes(data: dict) -> str:
    """Обрабатывает наличие проблем у пользователя."""
    user_id = data['user_id']
    chat_id = data['chat_id'] 

    update_context(chat_id=chat_id, message_type="daily_standup_ai_response_check", user_id=user_id)

    return "Please describe the issue or blocker you are facing."

def handle_issue_resolved(data: dict) -> str:
    """Отмечает проблему как решённую в Firestore."""
    user_id = data['user_id']
    chat_id = data['chat_id']

    update_context(chat_id=chat_id, message_type=None, user_id=user_id)
    update_issue_status(user_id, "Resolved")

    return "Thank you for your response.\nThe issue has been saved as resolved."

def handle_issue_not_resolved(data: dict) -> str:
    """Обрабатывает случай нерешённой проблемы."""
    user_id = data['user_id']
    chat_id = data['chat_id']

    update_context(chat_id=chat_id, message_type=None, user_id=user_id)

    if datetime.datetime.now(pytz.utc).hour == END_NOTIFICATIONS_TIME:
        update_issue_status(user_id, "Escalated")
        
    return "Thank you for your response.\nThe issue has been saved as not resolved.\n\n*If you have any questions, write here.*\n\n_After 17:00 UTC, your issue will be sent to your mentor._"

def daily_standup_ai_response_check(data: dict) -> str:
    """Обрабатывает описание проблемы от пользователя."""
    message_text = data['message_text']
    user_id = data['user_id']
    chat_id = data['chat_id'] 

    save_standup(user_id, issues=message_text)
    save_issue(chat_id=chat_id, issue=message_text, status="Pending", user_id=user_id)
    update_context(chat_id=chat_id, message_type=None, user_id=user_id)

    ai_response = generate_ai_response(message_text, user_id)

    return f"Issues information saved successfully.\nThank you for your stand-up report. I will ask you about your problem later.\n\n*If you have any other questions, write here.*\n\n_AI Assistant Response\nGenerated by GPT-4o_\n\n{ai_response}"

def no_context(data: dict) -> str:
    """Обрабатывает сообщения вне контекста стендапа."""
    message_text = data['message_text']
    user_id = data['user_id']
    chat_id = data['chat_id']

    update_context(chat_id=chat_id, message_type=None, user_id=user_id)
    ai_response = generate_ai_response(message_text, user_id)

    return f"_AI Assistant Response\nGenerated by GPT-4o_\n\n{ai_response}"